require 'rant/filelist'
require 'build.rb'

import "md5"
import %w(autoclean c/dependencies)
#import %w(md5 autoclean c/dependencies)
gen C::Dependencies
gen Action do source "c_dependencies" end

SUBLIBS = %w( mbrtplugins )
SUBDIRS = %w( plugins )
subdirs SUBDIRS

cconf = CompilerConfig.new
cconf.cc  = `which gcc`.strip
cconf.cxx = `which g++`.strip
cconf.add_cflags( "-g" )
cconf.add_cflags( `pkg-config libxml-2.0 --cflags` )
cconf.add_cflags( `pkg-config sigc++-2.0 --cflags` ) 

#Add our compiler flags for libnetpbm
cconf.add_libs( SUBLIBS )
cconf.add_libs( "-lm" ) 
cconf.add_libs( "-lncurses" )
cconf.add_libs( `pkg-config libxml-2.0 --libs-only-l` )
cconf.add_libs( `pkg-config sigc++-2.0 --libs-only-l` )

cconf.add_libdirs( SUBDIRS )
cconf.add_libdirs( `pkg-config libxml-2.0 --libs-only-L` )
cconf.add_libdirs( `pkg-config sigc++-2.0 --libs-only-L` )

#store the compiler config in var
var['cconf'] = cconf
var['cxxtestgen'] = "/opt/cxxtest/cxxtestgen.pl"

src  = Rant::FileList[ '*.cpp' ] 
objs = src.ext( 'o' )
rt_deps = objs

desc "Build everything that has changed since the last build"
task :all => %w( cscope.out rt )

desc "Build everything from scratch."
task :dist_all => %w( clean dox cscope.out rt )

desc "Build everything from scratch"
task :default => %w( all )

desc "Clean up all build artifacts"
task :clean => %w(autoclean)

gen AutoClean

desc "Build the cscope database"
file "cscope.out" => Rant::FileList[ '**/*.cpp', '**/*.h' ] do |task_info|
    sys "cscope -R -I/usr/include -b `find . | grep '\.cpp\|\.h'`"
end

desc "Build documentation"
file :dox => Rant::FileList[ '**/*.cpp', "**/*.h" ] do |task_info|
    sys "doxygen > doxygen.log"
end

## !!! Quick hack until .so loading is in place !!! ###
## TODO: remove plugins/* from link line! ###
desc "Build the ray tracer (rt)"
file :rt => [ SUBLIBS.map { |sd| "plugins/lib#{sd}.so.0.0.1" }, objs ].flatten do |task_info|
    sys "#{cconf.cxx} #{cconf.cflags} -o #{task_info.name} #{objs.join(' ')} #{cconf.libdirs} #{cconf.libs}"
end

desc "default rule for .o files"
gen Rule, :o => :cpp do |task_info|
    sys "#{cconf.cxx} #{cconf.incdirs} #{cconf.cflags} -c -o #{task_info.name} #{task_info.source}"
end
