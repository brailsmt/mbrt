require 'rant/filelist'
require 'build.rb'

import %w(autoclean c/dependencies)

gen AutoClean

desc "Determine C++ dependencies"
gen C::Dependencies, :search => %w(. plugins)
gen Action do
    source "c_dependencies"
end

SUBLIBS = %w( )
SUBDIRS = %w( common core plugins )
subdirs SUBDIRS

#########################
# ./configure type stuff.
#########################
cconf = CompilerConfig.new(var)
cconf.cc  = `which gcc`.strip
cconf.cxx = `which g++`.strip
cconf.add_incdirs( %w(mbrt-common) )

cconf.add_cflags( "-g -rdynamic" )
cconf.add_pkg_config( "libxml-2.0" )
cconf.add_pkg_config( "sigc++-2.0" ) 

#Add our compiler flags for libnetpbm
cconf.add_libs( SUBLIBS )
cconf.add_libs( "-lm" ) 
cconf.add_libs( "-lncurses" )

#store the compiler config in var
var['cconf'] = cconf
var['cxxtestgen'] = "/opt/cxxtest/cxxtestgen.pl"
################################
# End of ./configure type stuff.
################################

# Get a listing of all the C++ files to build.
src  = Rant::FileList[ '*.cpp' ] 
objs = src.ext( 'o' )

desc "Build everything that has changed since the last build"
task :all => %w( cscope.out mbrt-plugins/default rt )

desc "Build everything from scratch."
task :dist_all => %w( clean dox cscope.out rt )

desc "Build everything from scratch"
task :default => %w( all )

desc "Clean up all build artifacts"
task :clean => %w(autoclean) do
    # Clean up artifacts that Rant can't track
    sys "rm -rf *.gc*"
    sys "rm -rf coverage_reports"
    sys "rm -f app.info core c_dependencies */c_dependencies"
end

desc "Generate coverage reports"
task :coverage => %w(clean config_coverage all run_scene gather_coverage)

desc "Set flags for coverage reports"
task :config_coverage do |task_info|
    cconf.add_cflags( "-fprofile-arcs -ftest-coverage " )
    cconf.add_ldflags( "-fprofile-arcs -ftest-coverage " )
end
    
desc "Gather coverage reports"
task :gather_coverage do
   sys "lcov -c --directory . --output-file app.info"
   sys "mkdir -p ./coverage_reports"
   sys "genhtml -o coverage_reports app.info"
end

desc "Runs a scene file. Used for coverage reports."
task :run_scene do |task_info|
    sys "./rt -s scenes/test_reflection.xml"
end

desc "Build the cscope database"
file "cscope.out" => Rant::FileList[ '**/*.cpp', '**/*.h' ] do |task_info|
    sys 'cscope -R -I/usr/include -b `find . | grep \'\.cpp$\|\.h$\'`'
end

desc "Build documentation"
file :dox => Rant::FileList[ '**/*.cpp', "**/*.h" ] do |task_info|
    sys "doxygen > doxygen.log"
end

desc "Build the ray tracer (rt)"
file :rt => [ subdirs, SUBLIBS.map { |sd| "plugins/lib#{sd}.so.0.0.1" }, objs ].flatten do |task_info|
    sys "#{cconf.cxx} #{cconf.cflags} -o #{task_info.name} #{objs.join(' ')} #{cconf.libdirs} #{cconf.libs}"
end

