require 'rant/filelist'
require 'build.rb'

import %w(autoclean c/dependencies)

SUBLIBS = %w( )
SUBDIRS = %w( plugins src common )

gen C::Dependencies,
    :search  => SUBDIRS,
    :sources => sys["plugins/*.cpp", "src/*.cpp", "plugins/*.h", "src/*.h", "common/*.h"]
gen Action do source "c_dependencies" end

subdirs SUBDIRS

#########################
# ./configure type stuff.
#########################
cconf = CompilerConfig.new(var)
cconf.cc  = `which gcc`.strip
cconf.cxx = `which g++`.strip

cconf.add_cflags( "-g -rdynamic" )
cconf.add_pkg_config( "libxml-2.0" )
cconf.add_pkg_config( "sigc++-2.0" ) 
cconf.add_pkg_config( "ImageMagick++" ) 

#enable profiling?
cconf.optional_config("gprof", false) { cconf.add_cflags("-pg") }
cconf.optional_config("gcov", false)  { 
    cconf.add_cflags( "-fprofile-arcs -ftest-coverage " )
    cconf.add_ldflags( "-fprofile-arcs -ftest-coverage " )
}

#Add our compiler flags for libnetpbm
cconf.add_libs( SUBLIBS )
cconf.add_libs( "-lm" ) 

#store the compiler config in var
var['cconf'] = cconf
var['cxxtestgen'] = "/opt/cxxtest/cxxtestgen.pl"
################################
# End of ./configure type stuff.
################################

desc "Build everything that has changed since the last build"
task :all => ["cscope.out", SUBDIRS.map { |dir| "#{dir}/default" }, "rt" ].flatten

desc "Build everything from scratch."
task :dist_all => %w( clean dox cscope.out rt )

desc "Build everything from scratch"
task :default => %w( all )

desc "Clean up all build artifacts"
gen AutoClean, :clean
#Add any additional files you want the "clean" task to clean up below.  These
#are Ruby file globs.
var[:clean].include "**/*.gc*",
                    "coverage_reports",
                    "app.info",
                    "core",
                    "c_dependencies",
                    "rt",
                    "doc/dox.tbz2",
                    "doc/doxygen/**"

desc "Generate coverage reports"
task :coverage => %w(run_scene gather_coverage)

desc "Gather coverage reports"
task :gather_coverage do
   sys "lcov -c --directory . --output-file app.info"
   sys "mkdir -p ./coverage_reports"
   sys "genhtml -o coverage_reports app.info"
end

#desc "Runs a scene file. Used for coverage reports."
task :run_scene do |task_info|
    sys "./rt -s scenes/test_reflection.xml"
end

desc "Build the cscope database"
file "cscope.out" => Rant::FileList[ '{plugins,common,src}/*.{h,cpp}' ] do |task_info|
    File.open("cscope.files", "w+") { |file|
        file.puts task_info.deps
    }
    sys 'cscope -I/usr/include -b'
end

desc "Build documentation"
file :dox => Rant::FileList[ '{plugins,common,src}/*.{h,cpp}' ] do |task_info|
    sys "doxygen > doxygen.log 2>&1"
    sys "cd doc; mv html doxygen; tar cjvf dox.tbz2 doxygen/ > /dev/null"
end

desc "Publish API documentation to sourceforge."
task :publish_dox => %w( dox ) do
    sys 'scp doc/dox.tbz2 shell.sf.net:/home/groups/m/mb/mbrt/htdocs'
    sys 'ssh shell.sf.net "rm -rf /home/groups/m/mb/mbrt/htdocs/doxygen; cd /home/groups/m/mb/mbrt/htdocs; tar xjvf dox.tbz2 > /dev/null; rm dox.tbz2"'
end

desc "Publish website to sourceforge."
task :publish_site do
    sys 'cd doc/htdocs; tar cjvf ../htdocs.tbz2 .'
    sys 'scp doc/htdocs.tbz2 shell.sf.net:/home/groups/m/mb/mbrt/htdocs'
    sys 'ssh shell.sf.net "rm -f /home/groups/m/mb/mbrt/htdocs; cd /home/groups/m/mb/mbrt/htdocs; tar xjvf htdocs.tbz2 > /dev/null; rm htdocs.tbz2"'
end


desc "Build the ray tracer (rt)"
task :rt do |task_info|
    objs = sys["src/*.o"]
    build_rt = proc { |objs| sys "#{cconf.cxx} #{cconf.cflags} -o #{task_info.name} #{cconf.libdirs} #{cconf.libs} #{objs.join " "}" }
    if not File.exists?("rt")
        build_rt.call(objs)
    end

    objs.each { |obj|
        if File.mtime(obj) > File.mtime("rt")
            build_rt.call(objs)
            break
        end
    }
end

# Default rule for .o files.  Any subdir specific stuff should be put in var["<subdir>_conf"].
gen Rule, :o => :cpp do |task_info|
    cconf = var['cconf']
    mycconf = var["#{rant.current_subdir}_conf"]
    sys "#{cconf.cxx} #{cconf.cflags} #{mycconf.cflags} #{cconf.incdirs} #{mycconf.incdirs} -c -o #{task_info.name} #{task_info.source}"
end
